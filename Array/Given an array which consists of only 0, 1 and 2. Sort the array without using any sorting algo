=======================================
Dutch National flag problem approach
=======================================
//Time complexity=O(N)
//Space complexity=O(1)

#include<iostream>
using namespace std;
int sort(int a[],int n){
	int low,mid,high;
	low=0;
	mid=0;
	high=n-1;
	
	//Iteration over an array
	while(mid<=high){
	//sorting 	
	switch(a[mid]){
		case 0:
			swap(a[low++],a[mid++]);
			break;
		case 1:
			mid++;
			break;
		case 2:
			swap(a[mid],a[high--]);
			break;
			
	}
}
}
//Driver code
int main(){
	int arr[]={0,1,2,0,1,2};
	int n=sizeof(arr)/sizeof(arr[0]);
	sort(arr,n);
	for(int i=0;i<n;i++)	{
		cout<<arr[i]<<" ";
	}
	return 0;
}



====================
Counting approach
====================
//Time complexity=O(N)
//Space complexity=O(1)

#include<iostream>
using namespace std;
int sort(int a[],int n){
	int cnt0,cnt1,cnt2;
	cnt0=0;
	cnt1=0;
	cnt2=0;
	
	for(int i=0;i<n;i++){
		switch(a[i]){
			case 0:
				cnt0++;
				break;
				
			case 1:
				cnt1++;
				break;
				
			case 2:
				cnt2++;
				break;
		}
	}
	int j=0;
	while(cnt0>0){
		a[j++]=0;
		cnt0--;
	}
	while(cnt1>0){
		a[j++]=1;
		cnt1--;
	}
	while(cnt2>0){
		a[j++]=2;
		cnt2--;
	}
}
int main(){
	int a[]={0,1,2,2,1,1,0};
	int n=sizeof(a)/sizeof(a[0]);
	sort(a,n);
	for(int i=0;i<n;i++){
		cout<<a[i]<<" ";
	}
}
